# Required: The name of the FASTA file to process (.fasta, .faa, .fasta.gz, or .faa.gz); alternatively, a tab-delimited text file with protein info. Either define this at the command line using /I or in a parameter file. When using /I at the command line, surround the filename with double quotes if it contains spaces
Input=

# Optionally set this to true to indicate that the input file is a FASTA file. If false, the format will be assumed to be FASTA only if the filename ends with .fasta, .faa, .fasta.gz, or .faa.gz
AssumeFasta=False

# Specifies the column order in delimited input files; ignored if the input file is a FASTA file
DelimitedFileFormatCode=ProteinName_Description_Sequence

# When true, assume the delimited input file has a header line
DelimitedFileHasHeaderLine=True

# Input file delimiter (only used for delimited protein input files, not FASTA files); default is the tab character
InputFileDelimiter=

# When true, do not include protein description in the output file
ExcludeProteinDescription=False

# When true, do not include protein sequence in the output file
ExcludeProteinSequence=False

# When true, truncate protein descriptions longer than 7995 characters
TruncateProteinDescription=True

# Output directory name (or full path). If omitted, the output files will be created in the program directory
Output=

# Output file delimiter; default is a tab character
OutputFileDelimiter=

# Search in subdirectories
Recurse=False

# When searching in subdirectories, the maximum depth to search. When 0 or negative, recurse infinitely. When 1, only process the current directory. When 2, process the current directory and files in its subdirectories.
RecurseDepth=0

# Optionally provide a directory path to write results to when searching in subdirectories
AlternateOutputDirectory=

# When searching in subdirectories, if an alternate output directory has been defined, this can be set to true to re-create the input directory hierarchy in the alternate output directory
RecreateDirStructure=False

# If specified, write to a log file. Can optionally provide a log file path
LogFile=

# When true, compute predicted elution time values for digested peptides and/or for entries in a tab-delimited text output file
ComputeNET=True

# When true, compute pI values for digested peptides and/or for entries in a tab-delimited text output file
ComputepI=True

# When true, compute predicted SCX values for digested peptides and/or for entries in a tab-delimited text output file
ComputeSCX=True

# Hydrophobicity mode to use when ComputepI is true
HydrophobicityMode=HW

# When ComputepI is true, set this to true to examine the protein residues in chunks of SequenceLengthMaximumpI, compute the pI for each chunk, then report the largest pI
ReportMaximumpI=False

# When ReportMaxpI is true, use this to specify the number of residues to group together for computing localized pI
SequenceLengthMaximumpI=10

# When true, compute mass values for digested peptides and/or for entries in a tab-delimited text output file
ComputeProteinMass=True

# Mass mode to use when computing mass values
ElementMassMode=IsotopicMass

# When true, include X residues when computing protein mass (using the mass of Ile/Leu)
IncludeXResiduesInMass=False

# When true, in-silico digest the proteins in the input file
DigestProteins=False

# Enzyme to use for protein digestion
DigestionEnzyme=ConventionalTrypsin

# Maximum number of missed cleavages when digesting proteins
MaxMissedCleavages=3

# Minimum length of peptides to allow when digesting proteins
MinimumFragmentResidueCount=1

# Maximum fragment mass to allow when digesting proteins
MinimumFragmentMass=400

# Maximum fragment mass to allow when digesting proteins
MaximumFragmentMass=6000

# Fragment mass mode to use when digesting proteins
FragmentMassMode=Monoisotopic

# Minimum pI value to allow when digesting proteins; only used if ComputepI is true
MinimumIsoelectricPoint=0

# Maximum pI value to allow when digesting proteins; only used if ComputepI is true
MaximumIsoelectricPoint=14

# Cysteine treatment mode to use when digesting proteins
CysTreatmentMode=Untreated

# If true, only report peptides with at least one cysteine residue when digesting proteins
CysPeptidesOnly=False

# If true, remove duplicate sequences when digesting proteins
RemoveDuplicateSequences=False

# If true, include prefix and suffix residues in the output file when digesting proteins
IncludePrefixAndSuffixResidues=False

# When true, write the output file as a FASTA file; only valid if DigestProteins is false. An error will occur if the input file is a FASTA file
CreateFastaOutputFile=False

# When true, writes the proteins to a file; when false, then caches the results in memory
CreateProteinOutputFile=False

# When true, compute sequence hash values for digested peptides and/or for entries in a tab-delimited text output file
ComputeHashValues=False

# When true and computing sequence hash values, treat isoleucine and leucine as the same residue
SequenceHashIgnoreILDiff=True

# When true, assign UniqueID values to the digested peptides (requires more memory); only valid if CreateDigestedProteinOutputFile is True
GenerateUniqueIDs=True

# When creating a protein output file (and thus not digesting), optionally use this to specify that reversed or scrambled sequences be written
ScrambleMode=None

# When creating a reversed or scrambled output file, set this to a value less than 100 to only include a portion of the residues from the input file in the output file
ScrambleSamplingPercentage=100

# When creating a reversed or scrambled output file, set this to a value greater than 1 to create multiple scrambled versions of the input file
ScrambledFileCount=1

# When true, do not show protein names while digesting proteins
QuietMode=False
